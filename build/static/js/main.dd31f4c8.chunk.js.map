{"version":3,"sources":["Filter.js","Form.js","Person.js","Persons.js","Notification.js","services/phonebook.js","App.js","index.js"],"names":["Filter","setQuery","onChange","e","target","value","type","placeholder","Form","handleSubmit","newName","newNumber","setNewName","setNewNumber","onClick","Person","person","handleDelete","name","number","id","Persons","persons","query","regex","RegExp","filter","match","map","key","Notification","message","className","baseUrl","Axios","get","then","res","data","entry","post","delete","put","App","useState","setPersons","notification","setNotification","useEffect","phonebookService","notify","setTimeout","preventDefault","personExists","find","window","confirm","newEntry","updatedEntry","catch","error","concat","_res","_err","p","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dd31f4c8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Filter = ({ setQuery }) => {\r\n\treturn <input onChange={(e) => setQuery(e.target.value)} type=\"text\" placeholder=\"Search phonebook...\" />;\r\n};\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\n\r\nconst Form = ({ handleSubmit, newName, newNumber, setNewName, setNewNumber }) => {\r\n\treturn (\r\n\t\t<form>\r\n\t\t\t<div>\r\n\t\t\t\tname: <input value={newName} onChange={(e) => setNewName(e.target.value)} />\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\tnumber: <input value={newNumber} onChange={(e) => setNewNumber(e.target.value)} />\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<button onClick={handleSubmit} type=\"submit\">\r\n\t\t\t\t\tadd\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nconst Person = ({ person, handleDelete }) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{person.name} {person.number} <button onClick={() => handleDelete(person.id, person.name)}>Delete</button>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Person;\r\n","import React from 'react';\r\nimport Person from './Person';\r\n\r\nconst Persons = ({ persons, query, handleDelete }) => {\r\n\tlet regex = new RegExp(query, 'gi');\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{persons\r\n\t\t\t\t.filter((person) => person.name.match(regex))\r\n\t\t\t\t.map((person) => (\r\n\t\t\t\t\t<p key={person.id}>\r\n\t\t\t\t\t\t<Person handleDelete={handleDelete} person={person} />\r\n\t\t\t\t\t</p>\r\n\t\t\t\t))}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Persons;\r\n","import React from 'react';\r\n\r\nconst Notification = ({ message, type }) => {\r\n\tif (message === null) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst className = type === 'success' ? 'success' : 'error';\r\n\r\n\treturn <div className={className}>{message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import Axios from 'axios';\r\nconst baseUrl = `/api/persons`;\r\n\r\nconst getAllPersons = () => {\r\n\tconst req = Axios.get(baseUrl);\r\n\treturn req.then((res) => res.data);\r\n};\r\n\r\nconst create = (entry) => {\r\n\tconst req = Axios.post(baseUrl, entry);\r\n\treturn req.then((res) => res.data);\r\n};\r\n\r\nconst deleteEntry = (id) => {\r\n\tconst req = Axios.delete(`${baseUrl}/${id}`);\r\n\treturn req.then((res) => res.data);\r\n};\r\n\r\nconst updateEntry = (id, entry) => {\r\n\tconst req = Axios.put(`${baseUrl}/${id}`, entry);\r\n\treturn req.then((res) => res.data);\r\n};\r\n\r\nexport default { getAllPersons, create, deleteEntry, updateEntry };\r\n","import React, { useState, useEffect } from 'react';\r\nimport Filter from './Filter';\r\nimport Form from './Form';\r\nimport Persons from './Persons';\r\nimport Notification from './Notification';\r\nimport phonebookService from './services/phonebook';\r\n\r\nconst App = () => {\r\n\tconst [persons, setPersons] = useState([]);\r\n\tconst [newName, setNewName] = useState('');\r\n\tconst [newNumber, setNewNumber] = useState('');\r\n\tconst [query, setQuery] = useState('');\r\n\tconst [notification, setNotification] = useState({\r\n\t\tmessage: null,\r\n\t\ttype: '',\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tphonebookService.getAllPersons().then((persons) => setPersons(persons));\r\n\t}, []);\r\n\r\n\tconst notify = (message, type) => {\r\n\t\tsetNotification({\r\n\t\t\tmessage,\r\n\t\t\ttype,\r\n\t\t});\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tsetNotification({\r\n\t\t\t\tmessage: null,\r\n\t\t\t\ttype: '',\r\n\t\t\t});\r\n\t\t}, 5000);\r\n\t};\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tif (newName === '' || newNumber === '') return;\r\n\r\n\t\tconst personExists = persons.find((person) => person.name === newName);\r\n\r\n\t\tif (personExists) {\r\n\t\t\tconst popup = window.confirm(\r\n\t\t\t\t`${newName} is already added to the phonebook, replace the old number with a new one?`\r\n\t\t\t);\r\n\r\n\t\t\tif (popup) {\r\n\t\t\t\tlet newEntry = {\r\n\t\t\t\t\tname: personExists.name,\r\n\t\t\t\t\tnumber: newNumber,\r\n\t\t\t\t};\r\n\t\t\t\tlet id = personExists.id;\r\n\t\t\t\tphonebookService\r\n\t\t\t\t\t.updateEntry(id, newEntry)\r\n\t\t\t\t\t.then((updatedEntry) => {\r\n\t\t\t\t\t\tsetPersons(persons.map((person) => (person.id !== id ? person : updatedEntry)));\r\n\t\t\t\t\t\tsetNewName('');\r\n\t\t\t\t\t\tsetNewNumber('');\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch((error) => {\r\n\t\t\t\t\t\tnotify(`Entry for ${newName} had already been deleted from server`, 'error');\r\n\t\t\t\t\t\tsetPersons(persons.filter((person) => person.id !== id));\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\tnotify(`Updated ${newName}`, 'success');\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tlet newEntry = { name: newName, number: newNumber };\r\n\r\n\t\t\tphonebookService.create(newEntry).then((entry) => {\r\n\t\t\t\tsetPersons(persons.concat(entry));\r\n\t\t\t\tnotify(`Added ${newName} to the phonebook`, 'success');\r\n\t\t\t\tsetNewName('');\r\n\t\t\t\tsetNewNumber('');\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleDelete = (id, name) => {\r\n\t\tif (window.confirm(`Delete ${name}?`)) {\r\n\t\t\tphonebookService\r\n\t\t\t\t.deleteEntry(id)\r\n\t\t\t\t.then((_res) => {\r\n\t\t\t\t\tsetPersons(persons.filter((person) => person.id !== id));\r\n\t\t\t\t\tnotify(`Deleted Successfully!`, 'success');\r\n\t\t\t\t})\r\n\t\t\t\t.catch((_err) => {\r\n\t\t\t\t\tsetPersons(persons.filter((p) => p.id !== id));\r\n\t\t\t\t\tnotify(`${name} had already been deleted from server`, 'error');\r\n\t\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h2>Phonebook</h2>\r\n\t\t\t<Notification message={notification.message} type={notification.type} />\r\n\t\t\t<Filter setQuery={setQuery} />\r\n\t\t\t<h3>Add a new:</h3>\r\n\t\t\t<Form\r\n\t\t\t\tnewName={newName}\r\n\t\t\t\tsetNewName={setNewName}\r\n\t\t\t\tnewNumber={newNumber}\r\n\t\t\t\tsetNewNumber={setNewNumber}\r\n\t\t\t\thandleSubmit={handleSubmit}\r\n\t\t\t/>\r\n\t\t\t<h3>Numbers</h3>\r\n\t\t\t<Persons handleDelete={handleDelete} persons={persons} query={query} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}